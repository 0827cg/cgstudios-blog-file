---
layout: post
title: "Jekyll生成bolg文件及运作过程了解"
date: 2016-12-29 20:29:40
categories: jekyll
tags: jekyll
---

最近两天都在折腾博客,网上了解到有Jekyll配合Github搭建博客,也有Hexo配合Gihub来搭建博客的,当然也有其他的,我也没有去了解.此前一直单独用Github来放置个人主页,这很做法简单,但是很古板单一,工作量也大,库里面只能存放已做好的html静态页面,导致每次写博文都得重新写一张网页,填写url然后上传,这就使得过程很繁琐,而且如果没使用第三方框架来写的话,实现的效果也不大理想,交互性不强.

这里放个我以前那个单用github来存放的个人主页链接:[https://cgwh.github.io][],网页实现很简单,没有使用任何第三方框架.个人水平也不高,导致体验性很差.所以现在不打算再更新那个主页了,着手将博文写在这

<!-- more -->

我现在是用Jekyll配合Github来实现本站的,所以这里所写的都是个人对Jekyll+Github配合使用时它们的运作过程的了解.不用Hexo的原因很简单,Hexo在我电脑上没搭建好,系统是linux mint17.3.没成功我也不知道原因.不过现在感觉Jekyll挺好的,维护博客也很方便,所以先用着

先了解一下Jekyll具体是干嘛用的,一开始我根本不知道这东西有什么作用.Github大家都知道是用来存放代码文件的,刚开始我在网上搜文章只知道用它配合gihub来搭建个人主页很方便,我也不知道方便在哪里,它怎么方便了,它怎么运作的,它的原理是什么,这些我都不知道.这就让人很迷了

所以我想阐述下我个人对Jekyll的理解

### 概述:

Jekyll的作用就是读取用户对网页所提前做的自定义样式及用户所写的博文内容后,综合起来并编译成html文件的插件

#### 详述:

首先,它是用来生成html文件的,只有生成了html文件后放在github上用浏览器浏览才能显示博客.那么,它是怎么生成html文件的呢。
我们都知道,一张网页被解析后显示的页面可以分为一个部分,两个部分或者三部分甚至更多,但可以通常的来说,就是三部分:头,身体和脚.

想想我们人不也可以看成这三部分么,当然,你也可以看成说是一部分,就是一个人.每个人的看法都不一样.但在这里,如果将网页分为三部分,那么有个好处就是可以增强代码的复用性,使得代码不会显得那么沉余.这就让我想到了Java中三大特性:封装,集成和多态

同样,若将网页分为三部分:头部,脚部和中间部分,那么我们就可以将这三部分的代码分别封装起来,并定义其中的样式.这样的话,如果以后需要创建一个新的html网页,那么就可以引用其封装起来的头部,脚部,,,我们只需要更改其中间部分即可,这样就很方便了.当然,这里的引用过程是不需要我们手动操作的,这都交给Jekll来操作,我们要做的只是去定义网页的头部,脚部以及中间部分,并封装起来，所以现在来说,我们只需要做这些,就可以完成博客的建立么,答案是否定的。要是真这样的话,那我们所搭建的博客样式不都差不多么,这样就毫无个性可言了
要避免这个问题,我们还需要对自己的网页进行自定义.自定义包括css样式的自定义及html组件布局的自定义.想想,要是我们的博客的每一个页面的中间部分都一样,这就没什么新鲜了.就拿比方说,博客的首页和博客的about页面,以及博文的阅读页面,它们的布局是一样好,还是不一样好,,,,
所以说,革命尚未结束,同志们仍需努力
我们下一步就是要制作网页的布局,说明白一点,就是获取缩写的博文内容及信息后,该怎么放在网页中,在网页中怎么显示,,,等

完成网页的制作,若实现网页的浏览(针对url来说),这个问题并不大。网页的url地址是html的存放位置来定的,而jekyll编译得到的html文件的存放地址则是根据用户自己编写的markdown格式的博文来定的,也就是说,markdown格式的文件可以用来制定jekyll所编译生成的html文件的存放地址,在jekyll中,markdown格式的文件的书写和命名都有规定,jekyll就是获取markdown的信息来生成在制定目录,这样也就实现了网页url的定义了。所以,总的来说,要实现一个博客站点,需要我们自己定义博客的页面信息,样式,以及编写出配合博客信息的markdown文件,然后在交给jekyll让它来帮我们编译出一组完整的博客组成文件
关于搭建Jekyll+Github的教程这里就先不写,过程很简单,网上找几篇文章再配合Jekyll官方文档来,很快就可以实现

搭建好Jekyll+Github环境之后

### 本地建博

在本地新建一个文件夹,用来存放自己本地的博客，然后在该文件夹下运行命令
`jekyll new xxx`
其中xxx填写自己站点的名字,作为测试,随意填写,之后进入xxx文件夹,在该文件夹下我们可以看到jekyll在运行上面这条命令后为我们生成的文件及文件夹
如图

![jekyll生成文件](/images/jekyll/jekyll-1.png)

看到图片中显示的文件夹及文件信息,可以说是很悲哀,但也在情理之中.jekyll只为我们生成了这么些文件.
为完成本地博客的建立,我们在xxx目录文件夹下再运行命令:
`jekyll serve`
完成之后,在浏览器地址栏中输入
`http://127.0.0.1:4000`
便可查看到我们在本地搭建的博客网页了,如果输入url后不显示网页,那么就说明jekyll环境搭建好,那就需要重新搭建了
本地博客网页如图

![jekyll建站页面](/images/jekyll/jekyll-2.png)

会发现图片中显示的站点图标跟我现在博客站点的图标一样,,,,,,这我也不懂了,估计这是被我这是我此博客在电脑上的备份文件影响的,也或许这是全局设置,这个到时候再琢磨琢磨.之后,我们再查看下xxx文件夹下的文件信息
如图

![jekyll建站后生成文件](/images/jekyll/jekyll-3.png)

比较前面的图,会发现多了个_site文件夹,所以也就是说,_site文件夹是jekyll编译后生成的文件夹,接触官方文档后就会知道,这个文件夹就是存放jekyll编译整个站点文件后得到的文件看着jekyll自动生成的文件,一开始的我根本看不懂,根本不知道这写文件的作用,甚至看来官方给的目录结构说明后也不是很明白.后来就去查看别人的主题文件,读里面的代码,才知道一个博客的文件关系
所以,要是你一开始就对jekyll默认生成的文件表示疑惑时,建议去下载别人的主题,并阅读它,多读代码,很容易就会明白的
例如我们下载一个主题,解压后进入目录,就比如下面图片中的

![jekyll主题文件](/images/jekyll/jekyll-file-4.png)

#### 文件简述

* css文件夹: 存放css样式
* images: 存放站点所需要用到的图片
* _includes: 存放网页组成部分,例如头部分---head.html
* _layouts: 存放网页html布局文件
* _posts: 用户存放博文
* _sass: 存放scss样式
* scripts: 存放javascript脚本
* _site: 存放网站编译后的文件,以上文件编译后都将存放此文件夹中
* about.md: about页面
* archive.html: 看文件名字,估计是用来显示全部博文的html布局页面
* catgory.html: 看文件名字,估计是用来分类显示全部博文的html布局页面
* _config.yml: jekyll的配置文件
* feed.xml: jekyll的配置文件
* index.md: 站点首页,html布局页面
* README.md: 介绍此主题,存放至github后会被读取先死在仓库下方

### 文件组成

#### _includes文件夹下

先看_includes文件夹内的文件,该文件夹下有三个组成文件

* head.html
* header.html
* footer.html

打开head.html,如下图

![head.html](/images/jekyll/jekyll-head-5.png)

看到图中,代码很简单,html标签这里就不解释了,简单都懂
看到title标签中出现
`if page.title..`
这行代码(有些字符打出来会出错,所以没打全),其中,`page.title`是用来获取当前页面的title信息的,这里的当前页面是指每个页面中的title属性,毕竟每个页面都得有head标签,`site.title`则为获取站点的title属性,也可理解为index.html首页面的title属性,下面一张表列出了jekyll的变量信息.

|变量|描述|例如|
|---|:---|:---:|
|site|类似全局变量,获取全局方位的信息|site.pages:获取该站点所有被page.html所承载的页面|
|page|只能获取当前页面的信息|page.title:博文的日期|
|content|页面的主要部分的内容|content:博文的内容|
|paginator|用来执行分页操作|paginate=5:每页达到5栏变自动分页|

那么,回到上面那行代码,可以知道,这是一条if的条件循环语句,大概的意思是,如果这个head标签加载到的是普通页面则显示该普通页面的标题,反之,则显示站点的标题.所以,head.html这个组成页面可以看成是一张完整网页中的一个head标签
其他的页面也是如此,header.html页面就是完整网页的一个导航栏,footer.html则是完整网页的根部,所以其内容也很简单

![footer.html](/images/jekyll/jekyll-footer-6.png)

#### _layouts文件夹

之后再来看_layouts文件夹下的html布局文件
 * default.html
 * page.html
 * post.html
按照经验,default.html是最基础的布局文件,page.html和post都将集成于default.html
page.html一般是用来承载站点主页和about页面,按照这个主题,about.md,archive.html和catgory.html以及index.html都将使用此布局
而post.html一般用来承载博文
了解了这个,我们再来依次查看这些文件

##### default.html

![default.html](/images/jekyll/jekyll-default-7.png)

可以看到,default.html这个文件包含有html5网页的声明
`<!DOCTYPE html>`
所以,这个页面的作用就是给post.html和page.html这两个布局文件一个框架,这样一来,post.html和page.html将遵循default.html的布局格式,其所谓的遵循,就是将自身嵌套进入default.html页面中
其嵌套的位置就是在default.html的
`content`
里,并结合上面的表,`content`所代表的就是被嵌套进default.html页面的其他页面的内容

##### page.html

![page.html](/images/jekyll/jekyll-page-8.png)

page.html在代码的开头,定义了
`layout: default`
那么,整个page.html就将被赋值给default.html页面中的`content`将被赋值给default.html，以此来完成嵌套。这以上所说的都是我个人对jekyll的运作过程的琢磨,为验证这个嵌套这一点,我们可以查看已编译好的网页的源代码来证明
同样是此主题,在本地运行起来,首先,我们知道该站点的主页index.html是承载于default.html这个布局文件的,如下图:

![index.html](/images/jekyll/jekyll-index-9.png)

既然index.html承载在default.html中,那么index.html的内容将被赋值给default.html中的
`content`
所以也就是说,网页在编译成_site文件夹中的一张index.html的完整网页后,上面图片中类名为'home'的div将出现在default.html中类名为'wrapper'的下面,或者说是里面.那么我们打开浏览器,打开本地博客的站点,查看首页index.html的源代码,查找后,如下图

![test-index.html](/images/jekyll/jekyll-10.png)

很显然,这样的嵌套是对的。所以,总的来说,jekyll生成的博客就是利用不同的嵌套,以及组成网页,将其整合起来生成网页,根据头信息\(官方文档称为YAML信息\)来生成url信息。想想一开始我对jekyll丝毫不了解,不懂它是干什么的,不懂它是怎么运作的.不懂为什么这么多人使用它,而不是自己老老实实的写自己的代码,实现自己想要达到的目标.甚至比如那些框架,起初我是很反对接触那些框架的.不懂为什么作为一个常跟代码打交道的程序员,为什么要使用别人的代码,就不能自己做自己实现么,现在想想也很可笑.编程是一个会跟随时代的,现在的编程不同于过去的编程,以后的编程也必定不同于现在的编程.使用前人的代码来更便捷的实现自己的目的没有错,错就错在你不去学习使用别人的代码,学习别人的编码思路,一味的做自己代码而不吸收前辈的经验,是很难成长的,也必将被淘汰

好了,大概先就这样了,剩下的时间交给你,请多多指教.


[https://cgwh.github.io]:https://cgwh.github.io



